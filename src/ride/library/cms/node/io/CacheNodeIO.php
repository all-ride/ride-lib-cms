<?php

namespace ride\library\cms\node\io;

use ride\library\cms\node\NodeModel;
use ride\library\cms\node\Node;
use ride\library\cms\node\SiteNode;
use ride\library\system\file\File;

/**
 * Cache IO for another NodeIO. This IO will get the nodes from the wrapped IO
 * and generate a PHP script to include. When the generated PHP script exists,
 * this will be used to read the nodes.
 */
class CacheNodeIO extends AbstractNodeIO {

    /**
     * NodeIO which is cached by this instance
     * @var NodeIO
     */
    private $io;

    /**
     * File to write the cache to
     * @var \ride\library\system\file\File
     */
    private $file;

    /**
     * Constructs a new cached NodeIO
     * @param \ride\library\cms\node\io\NodeIO $io NodeIO which needs a cache
     * @param \ride\library\system\file\File $file File for the cache
     * @return null
     */
    public function __construct(NodeIO $io, File $file) {
        $this->io = $io;
        $this->setFile($file);
    }

    /**
     * Sets the instance of the node model
     * @param \ride\library\cms\node\NodeModel $nodeModel
     * @return null
     */
    public function setNodeModel(NodeModel $nodeModel) {
        parent::setNodeModel($nodeModel);

        $this->io->setNodeModel($nodeModel);
    }

    /**
     * Sets the file for the generated code
     * @param \ride\library\system\file\File $file File to generate the code in
     * @return null
     */
    public function setFile(File $file) {
        $this->file = $file;
    }

    /**
     * Gets the file for the generated code
     * @return \ride\library\system\file\File File to generate the code in
     * @return null
     */
    public function getFile() {
        return $this->file;
    }

    /**
     * Reads all the nodes from the data source into the $nodes variable
     * @return null
     */
    protected function readNodes() {
        if ($this->nodes !== null) {
            return $this->nodes;
        }

        if ($this->file->exists()) {
            // the generated script exists, include it
            include $this->file->getPath();

            if ($this->nodes) {
                // the script defined nodes, return them
                return $this->nodes;
            }
        }

        // we have no nodes, use the wrapped IO to get them
        $this->nodes = $this->io->readNodes();

        // generate the PHP code for the obtained nodes
        $php = $this->generatePhp($this->nodes);

        // make sure the parent directory of the script exists
        $parent = $this->file->getParent();
        $parent->create();

        // write the PHP code to file
        $this->file->write($php);

        // return the events
        return $this->nodes;
    }

    /**
     * Writes the provided node to the data source
     * @param \ride\library\cms\node\Node $node Node to write
     * @return null
     */
    protected function writeNode(Node $node) {
        $this->io->writeNode($node);
        $this->clearCache();
    }

    /**
     * Deletes the provided node to the data source
     * @param \ride\library\cms\node\Node $node Node to delete
     * @return null
     */
    protected function deleteNode(Node $node) {
        $this->io->deleteNode($node);
        $this->clearCache();
    }

    /**
     * Clears the cache of this node IO
     * @return null
     */
    public function clearCache() {
        $this->nodes = null;

        if ($this->file->exists()) {
            $this->file->delete();
        }
    }

    /**
     * Generates a PHP source file for the provided events
     * @param array $eventListeners
     * @return string
     */
    protected function generatePhp(array $nodes) {
        $output = "<?php\n\n";
        $output .= "/*\n";
        $output .= " * This file is generated by ride\\library\\cms\\node\\io\\CacheNodeIO.\n";
        $output .= " */\n";
        $output .= "\n";
        $output .= 'use ride\\library\\cms\\node\\NodeProperty;' . "\n";
        $output .= "\n";
        $output .= '$this->nodes = array();';
        $output .= "\n";
        $output .= "\n";

        foreach ($nodes as $node) {
            $output .= "// node " . $node->getId() . "\n";

            $output .= '$node = $this->nodeModel->createNode("' . $node->getType() . '");';
            $output .= "\n";
            $output .= '$node->setId("' . $node->getId() . '");';
            $output .= "\n";
            if ($node->getParent()) {
                $output .= '$node->setParent("' . $node->getParent() . '");';
                $output .= "\n";
            }
            if ($node->getOrderIndex() !== null && $node->getOrderIndex() !== '') {
                $output .= '$node->setOrderIndex(' . $node->getOrderIndex() . ');';
                $output .= "\n";
            }

            if ($node instanceof SiteNode) {
                $output .= '$node->setWidgetIdOffset(' . $node->getWidgetIdOffset() . ');';
                $output .= "\n";
                $output .= '$node->setAvailableWidgets(' . var_export($node->getAvailableWidgets(), true) . ');';
                $output .= "\n";
            }

            $output .= '$node->setProperties(array(' . "\n";
            $nodeProperties = $node->getProperties();
            ksort($nodeProperties);
            foreach ($nodeProperties as $key => $nodeProperty) {
                $output .= '    "' . $key . '" => new NodeProperty("' . $key . '", ' . var_export($nodeProperty->getValue(), true) . ', ' . var_export($nodeProperty->getInherit(), true) . '),' . "\n";
            }
            $output .= '));';
            $output .= "\n";
            $output .= "\n";
            $output .= '$this->nodes["' . $node->getId() . '"] = $node;';
            $output .= "\n";
            $output .= "\n";
        }

        $output .= '
// set the parent node instances
foreach ($this->nodes as $node) {
    $parentId = $node->getParentNodeId();
    if (!$parentId) {
        continue;
    }

    if (isset($this->nodes[$parentId])) {
        $node->setParentNode($this->nodes[$parentId]);
    } else {
        $rootId = $node->getRootNodeId();
        if (isset($this->nodes[$rootId])) {
            $node->setParentNode($this->nodes[$rootId]);
        }
    }
}';

        return $output;
    }

}
